/******************************************************
* PLEASE DO NOT EDIT THIS FILE
* the verification process may break
* ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

const TYPE = { UNIX: 0, PARSED_TIME: 1, TODAY: 2 }

if (!process.env.DISABLE_XORIGIN) {
  app.use(function (req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if (!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1) {
      console.log(origin);
      res.setHeader('Access-Control-Allow-Origin', origin);
      res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function (req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function (err, data) {
      if (err) return next(err);
      res.type('txt').send(data.toString());
    });
  });

app.route('/')
  .get(function (req, res) {
    res.sendFile(process.cwd() + '/views/index.html');
  })

// get and return time
app.get('/:time', (req, res) => {
  let date = req.params.time
  let response = {}
  switch (getType(date)) {
    case TYPE.TODAY:
      let today = new Date()
      response.parsedTime = today
      response.unixtime = today.getTime()
      break
    case TYPE.PARSED_TIME:
      response.parsedTime = date
      response.unixtime = new Date(date).getTime() || 'date not found'
      break
    default:
      response.unixtime = date
      response.parsedTime = (new Date(+date)).toDateString()
      break
  }
  res.json(response)
})

function getType (date) {
  if (date.toString().toLowerCase() === 'today') {
    return TYPE.TODAY
  }
  if (date.toString().match(/[a-z]/i)) {
    return TYPE.PARSED_TIME
  }
  return TYPE.UNIX
}

// Respond not found to all the wrong routes
app.use(function (req, res, next) {
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function (err, req, res, next) {
  if (err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }
})

app.listen(process.env.PORT || 3000, function () {
  console.log('Node.js listening ...');
});

